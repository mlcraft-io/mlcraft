tests:
  datasource_flow:
    steps:
      - name: delete_test_data
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            x-hasura-admin-secret: ${{env.HASURA_GRAPHQL_ADMIN_SECRET}}
          graphql:
            query: |
              mutation delete_test_data($users_where: users_bool_exp!, $teams_where: teams_bool_exp!){
                delete_users(where: $users_where) {
                  affected_rows
                }

                delete_teams(where: $teams_where) {
                  affected_rows
                }
              }
            variables:
              users_where:
                display_name:
                  _in: ["${{env.TEST_USER_EMAIL}}", "${{env.INVITE_USER_EMAIL}}"]
              teams_where:
                name:
                  _in: ["${{env.TEST_TEAM_NAME}}"]
          check:
            status: 200
            jsonpath:
              $.data.delete_users.affected_rows:
                - isNumber: true
      - name: sign_up
        http:
          url: ${{env.HASURA_PLUS_ENDPOINT}}/auth/register
          method: POST
          headers:
            Content-Type: application/json
          body: |
            {
              "email": "${{env.TEST_USER_EMAIL}}",
              "password": "pass321",
              "cookie": false
            }
          captures:
            accessToken:
              jsonpath: $.jwt_token
            refreshToken:
              jsonpath: $.refresh_token
          check:
            status: 200
            jsonpath:
              $.refresh_token:
                - isString: true
      - name: refresh_token
        http:
          url: ${{env.HASURA_PLUS_ENDPOINT}}/auth/token/refresh?refresh_token=${{captures.refreshToken}}
          method: GET
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
          captures:
            refreshToken:
              jsonpath: $.refresh_token
          check:
            status: 200
            jsonpath:
              $.refresh_token:
                - isString: true
      - name: change_password
        http:
          url: ${{env.HASURA_PLUS_ENDPOINT}}/auth/change-password
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
          body: |
            {
              "old_password": "pass321",
              "new_password": "pass123"
            }
          check:
            status: 204
      - name: logout
        http:
          url: ${{env.HASURA_PLUS_ENDPOINT}}/auth/logout?refresh_token=${{captures.refreshToken}}
          method: POST
          headers:
            Authorization: Bearer ${{captures.accessToken}}
          check:
            status: 204
      - name: login
        http:
          url: ${{env.HASURA_PLUS_ENDPOINT}}/auth/login
          method: POST
          headers:
            Content-Type: application/json
          body: |
            {
              "email": "${{env.TEST_USER_EMAIL}}",
              "password": "pass123",
              "cookie": false
            }
          captures:
            accessToken:
              jsonpath: $.jwt_token
            userId:
              jsonpath: $.user.id
            refreshToken:
              jsonpath: $.refresh_token
          check:
            status: 200
            jsonpath:
              $.jwt_token:
                - isString: true
              $.user.id:
                - isString: true
              $.refresh_token:
                - isString: true
      - name: create_team
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
            x-hasura-user-id: ${{captures.userId}}
          graphql:
            query: |
              mutation ($name: String!) {
                create_team(name: $name) {
                  id
                  name
                }
              }
            variables:
              name: ${{env.TEST_TEAM_NAME}}
          captures:
            teamId:
              jsonpath: $.data.create_team.id
          check:
            status: 200
            jsonpath:
              $.data.create_team.id:
                - isString: true
              $.data.create_team.name:
                - isString: true
      - name: invite_team_member
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
            x-hasura-user-id: ${{captures.userId}}
          graphql:
            query: |
              mutation ($email: String!, $teamId: uuid) {
                invite_team_member(email: $email, teamId: $teamId) {
                  code
                  message
                  memberId
                }
              }
            variables:
              email: "invite@test.com"
              teamId: ${{captures.teamId}}
          check:
            status: 200
            jsonpath:
              $.data.invite_team_member.memberId:
                - isString: true
      - name: create_datasource
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
            x-hasura-user-id: ${{captures.userId}}
          graphql:
            query: |
              mutation ($object: datasources_insert_input!) {
                insert_datasources_one(object: $object) {
                  id
                  name
                }
              }
            variables:
              object:
                db_params:
                  database: ${{env.DATABASE_NAME}}
                  host: ${{env.DATABASE_HOST}}
                  port: ${{env.DATABASE_PORT}}
                  ssl: ${{env.DATABASE_USE_SSL}}
                  user: ${{env.DATABASE_USER}}
                db_type: ${{env.DATABASE_TYPE}}
                name: ${{env.DATASOURCE_NAME}}
                team_id: ${{captures.teamId}}
          captures:
            datasourceId:
              jsonpath: $.data.insert_datasources_one.id
          check:
            status: 200
            jsonpath:
              $.data.insert_datasources_one.id:
                - isString: true
              $.data.insert_datasources_one.name:
                - isString: true
      - name: create_branch
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
            x-hasura-user-id: ${{captures.userId}}
          graphql:
            query: |
              mutation ($object: branches_insert_input!) {
                insert_branches_one(object: $object) {
                  id
                  name
                }
              }
            variables:
              object:
                name: "main"
                user_id: ${{captures.userId}}
                datasource_id: ${{captures.datasourceId}}
                status: "active"
          captures:
            branchId:
              jsonpath: $.data.insert_branches_one.id
          check:
            status: 200
            jsonpath:
              $.data.insert_branches_one.id:
                - isString: true
      - name: check_connection
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
            x-hasura-user-id: ${{captures.userId}}
          graphql:
            query: |
              mutation ($datasource_id: uuid!) {
                check_connection(datasource_id: $datasource_id) {
                  code
                  message
                }
              }
            variables:
              datasource_id: ${{captures.datasourceId}}
          check:
            status: 200
            jsonpath:
              $.data.check_connection.code: "ok"
      - name: validate_datasource
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
            x-hasura-user-id: ${{captures.userId}}
          graphql:
            query: |
              mutation ($id: uuid!) {
                validate_datasource(id: $id) {
                  code
                  message
                }
              }
            variables:
              id: ${{captures.datasourceId}}
          check:
            status: 200
            jsonpath:
              $.data.validate_datasource.code: "ok"
      - name: fetch_tables
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
            x-hasura-user-id: ${{captures.userId}}
          graphql:
            query: |
              query ($id: uuid!) {
                fetch_tables(datasource_id: $id) {
                  schema
                }
              }
            variables:
              id: ${{captures.datasourceId}}
          check:
            status: 200
            jsonpath:
              $.data.fetch_tables.schema.default:
                - isObject: true
      - name: gen_dataschemas
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
            x-hasura-user-id: ${{captures.userId}}
          graphql:
            query: |
              mutation ($datasource_id: uuid!, $tables: [SourceTable!]!, $branch_id: uuid!) {
                gen_dataschemas(datasource_id: $datasource_id, tables: $tables, branch_id: $branch_id) {
                  code
                  message
                }
              }
            variables:
              datasource_id: ${{captures.datasourceId}}
              tables: [{"name":"default/cell_towers"}, {"name":"default/checks"}]
              branch_id: "main"
          check:
            status: 200
            jsonpath:
              $.data.gen_dataschemas.code: "ok"

      - name: create_exploration
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
            x-hasura-user-id: ${{captures.userId}}
          graphql:
            query: |
              mutation ($object: explorations_insert_input!) {
                insert_explorations_one(object: $object) {
                  id
                }
              }
            variables:
              object:
                datasource_id: ${{captures.datasourceId}}
                playground_state:
                  page: 0
                  limit: 1000
                  order: []
                  offset: 0
                  filters: []
                  measures: ["CellTowers.count"]
                  segments: []
                  timezone: "UTC"
                  dimensions: ["CellTowers.lon", "CellTowers.created", "CellTowers.updated"]
                  timeDimensions: []
          captures:
            explorationId:
              jsonpath: $.data.insert_explorations_one.id
          check:
            status: 200
            jsonpath:
              $.data.insert_explorations_one.id:
                - isString: true
      - name: fetch_dataset
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
          graphql:
            query: |
              query ($exploration_id: uuid!, $offset: Int, $limit: Int) {
                fetch_dataset(exploration_id: $exploration_id, offset: offset, limit: $limit) {
                  data
                }
              }
            variables:
              exploration_id: ${{captures.explorationId}}
              limit: 5
          check:
            status: 200
            jsonpath:
              $.data.fetch_dataset.data:
                - isObject: true
      - name: export_data_models
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
            x-hasura-user-id: ${{captures.userId}}
          graphql:
            query: |
              mutation ($branch_id: String) {
                export_data_models(branch_id: $branch_id) {
                  download_url
                }
              }
            variables:
              branch_id: ${{captures.branchId}}
          check:
            status: 200
            jsonpath:
              $.data.export_data_models.download_url:
                - isString: true
      - name: fetch_meta
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
          graphql:
            query: |
              query ($datasource_id: uuid!) {
                fetch_meta(datasource_id: $datasource_id) {
                  cubes
                }
              }
            variables:
              datasource_id: ${{captures.datasourceId}}
          check:
            status: 200
            jsonpath:
              $.data.fetch_meta.cubes:
                - isObject: true
      - name: run_query
        http:
          url: ${{env.HASURA_ENDPOINT}}
          method: POST
          headers:
            Content-Type: application/json
            Authorization: Bearer ${{captures.accessToken}}
          graphql:
            query: |
              mutation ($datasource_id: uuid!, $query: String!, $limit: Int!) {
                run_query(datasource_id: $datasource_id, query: $query, limit: $limit) {
                  result
                }
              }
            variables:
              datasource_id: ${{captures.datasourceId}}
              query: "SELECT count(check_name) FROM default.checks"
              limit: 5
          check:
            status: 200
            jsonpath:
              $.data.run_query.result[0].count(check_name):
                - isString: true
