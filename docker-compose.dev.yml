version: '3.8'

services:
  postgres:
    image: postgres:12.2
    ports:
      - 5435:5432
    volumes:
      - pgstorage-data:/var/lib/postgresql/data
      - ./etc/postgres.conf:/var/lib/postgresql/data/postgresql.conf
    env_file:
      - .env
      - .dev.env
    networks:
      - mlcraft_default
    healthcheck:
      test: ['CMD', 'pg_isready']
      interval: 5s
      timeout: 5s
      retries: 5

  actions:
    restart: always
    command: yarn start.dev
    volumes:
      - ./services/actions/src:/app/src
      - ./services/actions/index.js:/app/index.js
    depends_on:
      supertokens:
        condition: service_healthy
    ports:
      - 3001:3000
    env_file:
      - .env
      - .dev.env

  cubejs:
    restart: always
    command: yarn start.dev
    volumes:
      - ./services/cubejs/src:/app/src
      - ./services/cubejs/index.js:/app/index.js
    ports:
      - 4000:4000
      - 9231:9229
      - 13306:13306
      - 15432:15432
    env_file:
      - .env
      - .dev.env

  hasura_cli:
    restart: always
    command: ./start.sh
    build:
      context: ./scripts/containers/hasura-cli
    ports:
      - 9693:9693
      - 9695:9695
    env_file:
      - .env
      - .dev.env
    environment:
      ENABLE_TELEMETRY: "false"
      CONSOLE_MODE: cli
    volumes:
      - ./services/hasura/migrations:/hasura/migrations
      - ./services/hasura/metadata:/hasura/metadata
      - ./services/hasura/config.yaml:/hasura/config.yaml
    depends_on:
      - hasura
    networks:
      - mlcraft_default

  hasura:
    restart: always
    ports:
      - 8080:8080
    env_file:
      - .env
      - .dev.env
    environment:
      ENABLE_TELEMETRY: "false"
      CONSOLE_MODE: server
    depends_on:
      - postgres
      - redis

  hasura_plus:
    restart: always
    build:
      context: ./scripts/containers/hasura-backend-plus
    ports:
      - 8081:3000
    env_file:
      - .env
      - .dev.env
    depends_on:
      - postgres

  minio:
    image: minio/minio:latest
    restart: always
    command: server --console-address ":9001" /data
    volumes:
      - minio-data:/data
    ports:
      - 9000:9000
      - 9001:9001
    env_file:
      - .env
      - .dev.env
    networks:
      - mlcraft_default
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3

  mailhog:
    image: mailhog/mailhog
    logging:
      driver: 'none'
    ports:
      - 1025:1025 # smtp server
      - 8025:8025 # web ui
    networks:
      - mlcraft_default

  client:
    build:
      context: ./services/client/
      args:
        NODE_ENV:
        ENABLE_MINIO_PROXY: true
    environment:
      GRAPHQL_SERVER_URL: http://hasura:8080/v1/graphql
      GRAPHQL_WS_URL: ws://hasura:8080/v1/graphql
      GRAPHQL_PLUS_SERVER_URL: http://hasura_plus:8080
    ports:
      - 9055:9055
    networks:
      - mlcraft_default

  cubestore:
    image: cubejs/cubestore:${CUBESTORE_VERSION:-v0.32.4}
    ports:
      - 3030:3030
    environment:
      - CUBESTORE_REMOTE_DIR=/cube/data
    volumes:
      - .cubestore:/cube/data
    networks:
      - mlcraft_default

  supertokens:
    image: registry.supertokens.io/supertokens/supertokens-postgresql:5.0
    depends_on:
      postgres:
        condition: service_healthy
    healthcheck:
      test: >
        bash -c 'exec 3<>/dev/tcp/127.0.0.1/3567 && echo -e "GET /hello HTTP/1.1\r\nhost: 127.0.0.1:3567\r\nConnection: close\r\n\r\n" >&3 && cat <&3 | grep "Hello"'
      interval: 10s
      timeout: 5s
      retries: 5
    env_file:
      - .env
      - .dev.env
    networks:
      - mlcraft_default

volumes:
  pgstorage-data:
  minio-data:
