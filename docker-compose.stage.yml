version: "3.8"

services:
  postgres:
    image: postgres:12.2
    deploy:
      placement:
        constraints: [node.role == manager]
    ports:
      - 5435:5432
    volumes:
      - pgstorage-data:/var/lib/postgresql/data
      - ./etc/postgres.conf:/var/lib/postgresql/data/postgresql.conf
    env_file:
      - .env
      - .stage.env
    networks:
      - mlcraft_default

  traefik:
    image: traefik:v2.5.5
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.http.routers.traefik.rule=Host(`lb.${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
        - traefik.http.routers.traefik.entrypoints=websecure
        - traefik.http.routers.traefik.service=api@internal
        - traefik.http.routers.traefik.tls=true
        - traefik.http.services.traefik.loadbalancer.server.port=888
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.pg_port.address=:15432
      - --entrypoints.mysql_port.address=:13306
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --entrypoints.web.http.redirections.entrypoint.priority=1000
      - --providers.docker=true
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedByDefault=false
      - --api=true
      - --api.dashboard=true
      - --accesslog=true
      - --log.level=DEBUG
    ports:
      - 80:80
      - 443:443
      - 15432:15432
      - 13306:13306
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./etc/acme.json:/acme.json
    networks:
      - mlcraft_default

  cubejs:
    image: ${REGISTRY_HOST}/mlcraft/cubejs:latest
    deploy:
      labels:
        # pg api
        - traefik.enable=true
        - traefik.tcp.routers.pg_api.rule=HostSNI(`*`)
        - traefik.tcp.routers.pg_api.entrypoints=pg_port
        - traefik.tcp.routers.pg_api.service=pg_api
        - traefik.tcp.services.pg_api.loadbalancer.server.port=15432
        # mysql api
        - traefik.tcp.routers.mysql_api.rule=HostSNI(`*`)
        - traefik.tcp.routers.mysql_api.entrypoints=mysql_port
        - traefik.tcp.routers.mysql_api.service=mysql_api
        - traefik.tcp.services.mysql_api.loadbalancer.server.port=13306
    command: yarn start
    env_file:
      - .env
      - .stage.env

  client:
    image: ${REGISTRY_HOST}/mlcraft/app-client:latest
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.http.routers.client.rule=Host(`app.${DOMAIN}`)
        - traefik.http.routers.client.entrypoints=websecure
        - traefik.http.routers.client.tls=true
        - traefik.http.services.client.loadbalancer.server.port=80
        - traefik.http.middlewares.client_compress.compress=true
        - traefik.http.routers.client.middlewares=client_compress
    build:
      context: ./services/client/
      args:
        NODE_ENV: test
    environment:
      GRAPHQL_SERVER_URL: ${PROTOCOL:-http}://api.${DOMAIN}/v1/graphql
      GRAPHQL_WS_URL: ${WS_PROTOCOL:-ws}://api.${DOMAIN}/v1/graphql
      GRAPHQL_PLUS_SERVER_URL: ${PROTOCOL:-http}://api-plus.${DOMAIN}
      CUBEJS_MYSQL_API_URL: tcp://sql-api.${DOMAIN}:13306
      CUBEJS_PG_API_URL: tcp://sql-api.${DOMAIN}:15432
    networks:
      - mlcraft_default

  hasura:
    image: ${REGISTRY_HOST}/mlcraft/hasura:latest
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.hasura.rule=Host(`api.${DOMAIN}`)
        - traefik.http.routers.hasura.entrypoints=websecure
        - traefik.http.routers.hasura.tls=true
        - traefik.http.services.hasura.loadbalancer.server.port=8080
    env_file:
      - .env
      - .stage.env
    environment:
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"

  hasura_plus:
    image: ${REGISTRY_HOST}/mlcraft/hasura-plus:latest
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.hasura_plus.rule=Host(`api-plus.${DOMAIN}`)
        - traefik.http.routers.hasura_plus.entrypoints=websecure
        - traefik.http.routers.hasura_plus.tls=true
        - traefik.http.services.hasura_plus.loadbalancer.server.port=3000
    env_file:
      - .env
      - .stage.env
    environment:
      SERVER_URL: ${PROTOCOL:-http}://api-plus.${DOMAIN}
      REDIRECT_URL_SUCCESS: ${PROTOCOL:-http}://app.${DOMAIN}/callback
      REDIRECT_URL_ERROR: ${PROTOCOL:-http}://app.${DOMAIN}/callback

  actions:
    image: ${REGISTRY_HOST}/mlcraft/hasura-actions:latest
    env_file:
      - .env
      - .stage.env

  cubestore:
    image: cubejs/cubestore:${CUBESTORE_VERSION:-v0.32.4}
    environment:
      - CUBESTORE_REMOTE_DIR=/cube/data
    volumes:
      - cubestore:/cube/data
    networks:
      - mlcraft_default

volumes:
  pgstorage-data:
  cubestore:
