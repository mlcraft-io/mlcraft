version: "3.8"

networks:
  mlcraft_default:
    external: true

services:
  redis:
    image: redis:7.0.0
    ports:
      - 6379:6379
    networks:
      - mlcraft_default

  postgres:
    image: postgres:${POSTGRES_VERSION}
    deploy:
      placement:
        constraints: [node.role == manager]
    ports:
      - 5435:5432
    volumes:
      - pgstorage-data:/var/lib/postgresql/data
      - ./etc/postgres.conf:/var/lib/postgresql/data/postgresql.conf
    env_file:
      - .env
      - .stage.env
    networks:
      - mlcraft_default

  traefik:
    image: traefik:v2.5.5
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.http.routers.traefik.rule=Host(`lb.${DOMAIN}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))
        - traefik.http.routers.traefik.entrypoints=websecure
        - traefik.http.routers.traefik.service=api@internal
        - traefik.http.routers.traefik.tls=true
        - traefik.http.services.traefik.loadbalancer.server.port=888
    command:
      - --entrypoints.web.address=:80
      - --entrypoints.websecure.address=:443
      - --entrypoints.pg_port.address=:15432
      - --entrypoints.mysql_port.address=:13306
      - --entrypoints.web.http.redirections.entryPoint.to=websecure
      - --entrypoints.web.http.redirections.entryPoint.scheme=https
      - --entrypoints.web.http.redirections.entrypoint.permanent=true
      - --entrypoints.web.http.redirections.entrypoint.priority=1000
      - --providers.docker=true
      - --providers.docker.swarmMode=true
      - --providers.docker.exposedByDefault=false
      - --api=true
      - --api.dashboard=true
      - --accesslog=true
      # - --log.level=DEBUG
    ports:
      - 80:80
      - 443:443
      - 15432:15432
      - 13306:13306
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./etc/acme.json:/acme.json
    networks:
      - mlcraft_default

  cubejs:
    image: ${REGISTRY_HOST}/mlcraft/cubejs:latest
    deploy:
      labels:
        - traefik.http.routers.cubejs.rule=Host(`cube.${DOMAIN}`)
        - traefik.http.routers.cubejs.entrypoints=websecure
        - traefik.http.routers.cubejs.tls=true
        # pg api
        - traefik.enable=true
        - traefik.tcp.routers.pg_api.rule=HostSNI(`*`)
        - traefik.tcp.routers.pg_api.entrypoints=pg_port
        - traefik.tcp.routers.pg_api.service=pg_api
        - traefik.tcp.services.pg_api.loadbalancer.server.port=15432
        # mysql api
        - traefik.tcp.routers.mysql_api.rule=HostSNI(`*`)
        - traefik.tcp.routers.mysql_api.entrypoints=mysql_port
        - traefik.tcp.routers.mysql_api.service=mysql_api
        - traefik.tcp.services.mysql_api.loadbalancer.server.port=13306
    build:
      context: ./services/cubejs
    command: yarn start
    env_file:
      - .env
      - .stage.env
    networks:
      - mlcraft_default

  client:
    image: ${REGISTRY_HOST}/mlcraft/app-client:latest
    deploy:
      placement:
        constraints: [node.role == manager]
      labels:
        - traefik.enable=true
        - traefik.http.routers.client.rule=Host(`app.${DOMAIN}`)
        - traefik.http.routers.client.entrypoints=websecure
        - traefik.http.routers.client.tls=true
        - traefik.http.services.client.loadbalancer.server.port=80
        - traefik.http.middlewares.client_compress.compress=true
        - traefik.http.routers.client.middlewares=client_compress
    build:
      context: ./services/client/
      args:
        CLIENT_VERSION: ${CLIENT_VERSION}
        HASURA_GRAPHQL_ENDPOINT: ${PROTOCOL:-http}://api.${DOMAIN}/v1/graphql
        HASURA_WS_ENDPOINT: ${WS_PROTOCOL:-ws}://api.${DOMAIN}/v1/graphql
        GRAPHQL_PLUS_SERVER_URL: ${PROTOCOL:-http}://auth.${DOMAIN}
        CUBEJS_MYSQL_API_URL: tcp://cube.${DOMAIN}:13306
        CUBEJS_PG_API_URL: tcp://sql-api.${DOMAIN}:15432
        CUBEJS_REST_API_URL: http://cube.${DOMAIN}/api/v1/load
        CUBEJS_API_DOCS_URL: http://cube.${DOMAIN}/docs
    networks:
      - mlcraft_default

  hasura:
    image: ${REGISTRY_HOST}/mlcraft/hasura:latest
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.hasura.rule=Host(`api.${DOMAIN}`)
        - traefik.http.routers.hasura.entrypoints=websecure
        - traefik.http.routers.hasura.tls=true
        - traefik.http.services.hasura.loadbalancer.server.port=8080
    env_file:
      - .env
      - .stage.env
    environment:
      HASURA_GRAPHQL_ENABLE_CONSOLE: "true"
    networks:
      - mlcraft_default

  hasura_plus:
    image: ${REGISTRY_HOST}/mlcraft/hasura-plus:latest
    deploy:
      labels:
        - traefik.enable=true
        - traefik.http.routers.hasura_plus.rule=Host(`auth.${DOMAIN}`)
        - traefik.http.routers.hasura_plus.entrypoints=websecure
        - traefik.http.routers.hasura_plus.tls=true
        - traefik.http.services.hasura_plus.loadbalancer.server.port=3000
    build:
      context: ./scripts/containers/hasura-backend-plus
    env_file:
      - .env
      - .stage.env
    environment:
      SERVER_URL: ${PROTOCOL:-http}://auth.${DOMAIN}
      REDIRECT_URL_SUCCESS: ${PROTOCOL:-http}://app.${DOMAIN}/callback
      REDIRECT_URL_ERROR: ${PROTOCOL:-http}://app.${DOMAIN}/callback
    networks:
      - mlcraft_default

  actions:
    image: ${REGISTRY_HOST}/mlcraft/hasura-actions:latest
    build:
      context: ./services/actions/
    command: yarn start
    env_file:
      - .env
      - .stage.env
    networks:
      - mlcraft_default

  cubestore:
    image: cubejs/cubestore:${CUBESTORE_VERSION}
    environment:
      - CUBESTORE_REMOTE_DIR=/cube/data
    volumes:
      - cubestore:/cube/data
    networks:
      - mlcraft_default

  minio:
    image: minio/minio:latest
    command: server --console-address ":9001" /data
    volumes:
      - minio-data:/data
    env_file:
      - .env
      - .stage.env
    healthcheck:
      test:
        [
          "CMD",
          "curl",
          "-f",
          "http://localhost:9000/minio/health/live"
        ]
      interval: 30s
      timeout: 20s
      retries: 3
    networks:
      - mlcraft_default

volumes:
  pgstorage-data:
  cubestore:
